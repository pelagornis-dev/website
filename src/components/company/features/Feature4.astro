---
import { timelineData } from "@datas/timelineData";

const years = Object.keys(timelineData).sort((a, b) => parseInt(b) - parseInt(a));

---

<section class="max-w-6xl mx-auto p-6 py-32">
    <div class="mb-8 space-y-6 text-center">
        <h2 class="text-4xl font-semibold">Our Journey</h2>
        <p class="text-xl text-gray-400">From a bold idea to reshaping how the world works together</p>
    </div>

    <div class="space-y-3">
      {years.map((year) => (
        <div class="border border-gray-200 rounded-xl overflow-hidden bg-white transition-all duration-300">
          <button
            class="timeline-button w-full px-6 py-5 bg-white transition-all duration-300 flex items-center justify-between group"
            data-year={year}
          >
            <div class="flex items-center space-x-4">
              <span class="text-lg font-semibold text-gray-800 transition-colors duration-300">{year}</span>
              <span class="text-sm text-gray-400 transition-colors duration-300 group-hover:text-gray-300">
                {timelineData[year].length}개 이벤트
              </span>
            </div>
            <div class="timeline-arrow">
              <svg class="w-5 h-5 text-gray-400 group-hover:text-gray-300" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9 6 6 6-6"/>
              </svg>
            </div>
          </button>

          <div class="timeline-content" data-content={year}>
            <div class="px-6 pb-6 bg-gray-850">
              <div class="space-y-6 pt-4">
                {timelineData[year].map((event, index) => (
                  <div 
                    class="timeline-event relative transform"
                    style={`transition-delay: ${index * 100}ms`}
                  >
                    <div class="bg-white rounded-xl p-5 border border-gray-200 transition-all duration-300 hover:bg-gray-750">
                      <div class="flex items-center justify-between mb-3">
                        <h3 class="font-semibold text-black text-base">{event.title}</h3>
                        <span class="text-sm text-gray-600 font-medium bg-gray-100 px-2 py-1 rounded-lg">{event.month}</span>
                      </div>
                      <p class="text-gray-500 text-sm leading-relaxed">{event.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
</section>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      let selectedYear = null;
      
      const buttons = document.querySelectorAll('.timeline-button');
      
      buttons.forEach(button => {
        button.addEventListener('click', function() {
          const year = this.getAttribute('data-year');
          const content = document.querySelector(`[data-content="${year}"]`);
          const arrow = this.querySelector('.timeline-arrow');
          const events = content.querySelectorAll('.timeline-event');
          
          // 현재 선택된 년도와 같으면 닫기
          if (selectedYear === year) {
            content.classList.remove('active');
            arrow.classList.remove('rotated');
            events.forEach(event => event.classList.remove('visible'));
            selectedYear = null;
            return;
          }
          
          // 다른 모든 컨텐츠 닫기
          document.querySelectorAll('.timeline-content').forEach(c => {
            c.classList.remove('active');
          });
          document.querySelectorAll('.timeline-arrow').forEach(a => {
            a.classList.remove('rotated');
          });
          document.querySelectorAll('.timeline-event').forEach(e => {
            e.classList.remove('visible');
          });
          
          // 현재 컨텐츠 열기
          content.classList.add('active');
          arrow.classList.add('rotated');
          selectedYear = year;
          
          // 이벤트들을 순차적으로 나타나게 하기
          events.forEach((event, index) => {
            setTimeout(() => {
              event.classList.add('visible');
            }, index * 100);
          });
        });
      });
    });
  </script>